#!/bin/bash

# Demo script to show how validation catches common errors
# This script demonstrates the validation pipeline by introducing errors

set -e

echo "üéØ ARM Template Validation Demo"
echo "==============================="
echo ""
echo "This demo shows how the validation pipeline catches common errors."
echo ""

ORIGINAL_FILE="azuredeployopenai.json"
DEMO_FILE="/tmp/demo-template.json"

# Create backup
cp "$ORIGINAL_FILE" "$DEMO_FILE.backup"

echo "1Ô∏è‚É£  Testing valid template..."
echo "Copying original template for testing..."
cp "$ORIGINAL_FILE" "$DEMO_FILE"

# Test valid template
python3 - << EOF
import json
import sys

try:
    with open('$DEMO_FILE', 'r') as f:
        template = json.load(f)
    
    # Basic validation
    required_keys = ['\$schema', 'contentVersion', 'parameters', 'resources']
    for key in required_keys:
        if key not in template:
            print(f"‚ùå Missing required key: {key}")
            sys.exit(1)
    
    print("‚úÖ Valid template structure")
    
except json.JSONDecodeError as e:
    print(f"‚ùå JSON syntax error: {e}")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Validation error: {e}")
    sys.exit(1)
EOF

echo ""
echo "2Ô∏è‚É£  Testing JSON syntax error..."
echo "Introducing JSON syntax error..."

# Create invalid JSON
cat > "$DEMO_FILE" << 'EOF'
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string"
      // Missing comma here - this will cause JSON syntax error
      "defaultValue": "swedencentral"
    }
  }
}
EOF

# Test invalid JSON
echo "Testing invalid JSON..."
if python3 -m json.tool "$DEMO_FILE" > /dev/null 2>&1; then
    echo "‚ùå Validation failed to catch JSON syntax error!"
else
    echo "‚úÖ JSON syntax error correctly detected"
fi

echo ""
echo "3Ô∏è‚É£  Testing missing required parameter..."
echo "Creating template with missing required parameter..."

# Create template missing required parameter
cat > "$DEMO_FILE" << 'EOF'
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "swedencentral"
    }
  },
  "resources": []
}
EOF

# Test missing parameter
python3 - << EOF
import json
import sys

try:
    with open('$DEMO_FILE', 'r') as f:
        template = json.load(f)
    
    parameters = template.get('parameters', {})
    required_params = ['location', 'accountName', 'deploymentName', 'modelName', 'modelVersion']
    
    missing_params = []
    for param in required_params:
        if param not in parameters:
            missing_params.append(param)
    
    if missing_params:
        print(f"‚úÖ Missing parameters correctly detected: {', '.join(missing_params)}")
    else:
        print("‚ùå Validation failed to detect missing parameters!")

except Exception as e:
    print(f"Error during validation: {e}")
EOF

echo ""
echo "4Ô∏è‚É£  Testing invalid resource configuration..."
echo "Creating template with invalid resource configuration..."

# Create template with invalid resource
cat > "$DEMO_FILE" << 'EOF'
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {"type": "string", "defaultValue": "swedencentral"},
    "accountName": {"type": "string", "defaultValue": "test"}
  },
  "resources": [
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-10-01",
      "name": "[parameters('accountName')]",
      "location": "[parameters('location')]",
      "kind": "WrongKind",
      "sku": {"name": "WrongSKU"}
    }
  ]
}
EOF

# Test invalid resource
python3 - << EOF
import json
import sys

try:
    with open('$DEMO_FILE', 'r') as f:
        template = json.load(f)
    
    resources = template.get('resources', [])
    errors = []
    
    for resource in resources:
        if resource.get('type') == 'Microsoft.CognitiveServices/accounts':
            if resource.get('kind') != 'OpenAI':
                errors.append(f"Invalid kind: {resource.get('kind')} (should be 'OpenAI')")
            
            sku = resource.get('sku', {})
            if sku.get('name') != 'S0':
                errors.append(f"Invalid SKU: {sku.get('name')} (should be 'S0')")
    
    if errors:
        print(f"‚úÖ Resource configuration errors correctly detected:")
        for error in errors:
            print(f"   - {error}")
    else:
        print("‚ùå Validation failed to detect resource configuration errors!")

except Exception as e:
    print(f"Error during validation: {e}")
EOF

echo ""
echo "üßπ Cleaning up demo files..."
rm -f "$DEMO_FILE"

echo ""
echo "üéâ Demo Complete!"
echo "=================="
echo ""
echo "The validation pipeline successfully:"
echo "‚úÖ Validates JSON syntax"
echo "‚úÖ Checks for required parameters"
echo "‚úÖ Validates resource configurations"
echo "‚úÖ Provides clear error messages"
echo ""
echo "This ensures that only valid ARM templates are deployed! üöÄ"